// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("UNSOCIAL_DATABASE_URL")
}

generator fabbrica {
  provider = "prisma-fabbrica"
  output = "../app/_generated"
}

model Session {
  id           String   @id @default(nanoid(8))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String      @id @default(nanoid(8))
  preferredUsername String
  host              String
  name              String?
  summary           String?
  email             String?     @unique
  emailVerified     DateTime?
  icon              String?
  iconHash          String?
  image             String?
  publicKey         String?
  actorUrl          String?     @unique
  inboxUrl          String?
  lastFetchedAt     DateTime?
  isAdmin           Boolean     @default(false)
  sessions          Session[]
  notes             Note[]
  followee          Follow[]    @relation("followee")
  follower          Follow[]    @relation("follower")
  likes             Like[]
  credential        Credential?

  @@unique([preferredUsername, host])
}

model Credential {
  id             String @id @default(nanoid(8))
  userId         String @unique
  hashedPassword String
  privateKey     String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Note {
  id          String     @id @default(nanoid(8))
  url         String?    @unique
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     String
  quoteId     String?
  quote       Note?      @relation("Quote", fields: [quoteId], references: [id])
  publishedAt DateTime
  createdAt   DateTime   @default(now())
  replyToId   String?
  replyTo     Note?      @relation("ReplyTo", fields: [replyToId], references: [id])
  likes       Like[]
  likesCount  Int        @default(0)
  attachments Document[]
  quotes      Note[]     @relation("Quote")
  replies     Note[]     @relation("ReplyTo")
}

model Document {
  id        String @id @default(nanoid(8))
  noteId    String
  note      Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  mediaType String
  url       String
}

enum FollowStatus {
  SENT
  FAILED
  ACCEPTED
}

model Follow {
  id         String       @id @default(nanoid(8))
  status     FollowStatus @default(SENT)
  followeeId String
  followee   User         @relation("followee", fields: [followeeId], references: [id], onDelete: Cascade)
  followerId String
  follower   User         @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())

  @@unique([followeeId, followerId])
}

model Like {
  id        String   @id @default(nanoid(8))
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, noteId])
}
