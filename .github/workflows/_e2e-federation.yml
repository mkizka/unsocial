name: _e2e-federation

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string

env:
  UPLOAD_DIR: e2e-test
  AWS_S3_PUBLIC_URL: ${{ secrets.AWS_S3_PUBLIC_URL }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#github-actions
      - uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/e2e/myhost/cache
            ${{ github.workspace }}/.next/e2e/remote/cache
          key: nextjs-e2e-${{ hashFiles('pnpm-lock.yaml') }}
      # fetchキャッシュが使われるとなぜかe2eが失敗するので削除する
      - name: Remove fetch-cache
        run: |
          rm -rf .next/e2e/myhost/cache/fetch-cache
          rm -rf .next/e2e/remote/cache/fetch-cache
      - run: corepack enable pnpm
      - uses: actions/setup-node@v4
        with:
          node-version-file: .tool-versions
          cache: pnpm
      - run: pnpm i
      # https://github.com/FiloSottile/mkcert#linux
      - name: Install mkcert
        run: |
          sudo apt install -y libnss3-tools
          curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
          chmod +x mkcert-v*-linux-amd64
          sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert
      # Secure ModeのMastodonではリレー機能がうまく動作しないため無効化する
      - run: sed 's/AUTHORIZED_FETCH=true//' ./docker/mastodon/.env.production | tee ./docker/mastodon/.env.production
        if: inputs.target == 'all'
      - name: Setup e2e
        run: |
          ./scripts/setup-for-docker.sh
          ./scripts/setup-for-e2e.sh ${{ inputs.target }}
      - run: pnpm playwright install --with-deps chromium
      - run: pnpm e2e -g ${{ inputs.target }}
      - run: docker compose logs --no-log-prefix --no-color ${{ inputs.target }} > reports/e2e/docker.txt 2>&1
        if: (success() || failure()) && github.event_name == 'pull_request' && (inputs.target == 'misskey' || inputs.target == 'mastodon')
      - run: aws s3 cp reports/e2e "s3://${{ env.AWS_S3_BUCKET }}/${{ env.UPLOAD_DIR }}/${{ github.event.pull_request.head.sha }}/${{ inputs.target }}" --recursive
        if: (success() || failure()) && github.event_name == 'pull_request'
      - uses: gh640/command-result-action@v1
        if: (success() || failure()) && github.event_name == 'pull_request'
        id: e2e-report
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          E2E_TEST_S3_BASEURL: ${{ env.AWS_S3_PUBLIC_URL }}/${{ env.UPLOAD_DIR }}
        with:
          command: ./scripts/e2e-report.ts
      - uses: thollander/actions-comment-pull-request@v2
        if: (success() || failure()) && github.event_name == 'pull_request'
        with:
          message: ${{ steps.e2e-report.outputs.stdout }}
          comment_tag: e2e-report
