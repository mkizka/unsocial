version: "3"

volumes:
  db_data:
  redis_data:

services:
  ############
  # Unsocial
  ############
  nginx-unsocial:
    image: nginx:1-alpine
    volumes:
      - ./docker/nginx/mastodon:/etc/nginx/conf.d
      - ./docker/nginx/confs:/etc/nginx/confs
      - ./docker/nginx/certs:/etc/nginx/certs
    ports:
      - 80:80
      - 443:443
    extra_hosts:
      - host.docker.internal:host-gateway
    profiles:
      - unsocial
  ############
  # Mastodon
  ############
  nginx-mastodon:
    image: nginx:1-alpine
    volumes:
      - ./docker/nginx/mastodon:/etc/nginx/conf.d
      - ./docker/nginx/confs:/etc/nginx/confs
      - ./docker/nginx/certs:/etc/nginx/certs
    ports:
      - 80:80
      - 443:443
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      default:
        aliases:
          - unsocial.localhost
    depends_on:
      mastodon-streaming:
        condition: service_healthy
      mastodon-sidekiq:
        condition: service_healthy
    profiles:
      - mastodon
  mastodon:
    image: tootsuite/mastodon:v4.2
    env_file: ./docker/mastodon/.env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rake db:migrate && bundle exec rails s -p 3000"
    healthcheck:
      # prettier-ignore
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:3000/health || exit 1"]
      interval: 2s
      timeout: 2s
      retries: 30
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./docker/mkcert:/mkcert
      - ./docker/mastodon/public/system:/mastodon/public/system
    profiles:
      - mastodon
  mastodon-streaming:
    image: tootsuite/mastodon:v4.2
    env_file: ./docker/mastodon/.env.production
    command: node ./streaming
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    depends_on:
      mastodon:
        condition: service_healthy
    profiles:
      - mastodon
  mastodon-sidekiq:
    image: tootsuite/mastodon:v4.2
    env_file: ./docker/mastodon/.env.production
    command: bundle exec sidekiq
    depends_on:
      mastodon:
        condition: service_healthy
    volumes:
      - ./docker/mkcert:/mkcert
      - ./docker/mastodon/public/system:/mastodon/public/system
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[s]idekiq\ 6' || false"]
    profiles:
      - mastodon
  ############
  # Misskey
  ############
  nginx-misskey:
    image: nginx:1-alpine
    volumes:
      - ./docker/nginx/misskey:/etc/nginx/conf.d
      - ./docker/nginx/confs:/etc/nginx/confs
      - ./docker/nginx/certs:/etc/nginx/certs
    ports:
      - 80:80
      - 443:443
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      default:
        aliases:
          - unsocial.localhost
    depends_on:
      misskey:
        condition: service_healthy
    profiles:
      - misskey
  misskey:
    image: misskey/misskey:2023.10
    volumes:
      - ./docker/misskey/files:/misskey/files
      - ./docker/misskey/.config:/misskey/.config:ro
      - ./docker/mkcert:/mkcert
    environment:
      - NODE_ENV=development
      - NODE_EXTRA_CA_CERTS=/mkcert/rootCA.pem
    healthcheck:
      test: ["CMD-SHELL", "node -e 'fetch(`http://localhost:3000`)'"]
      interval: 2s
      timeout: 2s
      retries: 30
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    profiles:
      - misskey
  ############
  # Others
  ############
  db:
    image: postgres:16-alpine
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./docker/db:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD", "test", "-e", "/tmp/db_initialized"]
      interval: 2s
      timeout: 2s
      retries: 10
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    profiles:
      - mastodon
      - misskey
  # mail:
  #   image: mailhog/mailhog:v1.0.1
  #   ports:
  #     - 8025:8025
