version: "3"

volumes:
  db_data:
  redis_data:
  minio_data:

services:
  ############
  # All
  ############
  nginx-all:
    image: nginx:1-alpine
    volumes:
      - ./docker/nginx/all:/etc/nginx/conf.d
      - ./docker/nginx/confs:/etc/nginx/confs
      - ./docker/nginx/certs:/etc/nginx/certs
    ports:
      - 80:80
      - 443:443
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      default:
        aliases:
          - unsocial.localhost
          - mastodon.localhost
          - misskey.localhost
          - relay.localhost
    depends_on:
      mastodon-streaming:
        condition: service_healthy
      mastodon-sidekiq:
        condition: service_healthy
      misskey:
        condition: service_healthy
      relay-server:
        condition: service_started
    profiles:
      - all
  relay-worker:
    image: yukimochi/activity-relay:v2.0.5
    command: relay worker
    working_dir: /var/lib/relay
    environment:
      - SSL_CERT_FILE=/mkcert/rootCA.pem
    volumes:
      - ./docker/relay:/var/lib/relay
      - ./docker/mkcert:/mkcert
    depends_on:
      - redis
    profiles:
      - all
  relay-server:
    image: yukimochi/activity-relay:v2.0.5
    working_dir: /var/lib/relay
    command: relay server
    environment:
      - SSL_CERT_FILE=/mkcert/rootCA.pem
    volumes:
      - ./docker/relay:/var/lib/relay
      - ./docker/mkcert:/mkcert
    depends_on:
      - redis
    profiles:
      - all
  ############
  # Unsocial
  ############
  nginx-unsocial:
    image: nginx:1-alpine
    volumes:
      - ./docker/nginx/unsocial:/etc/nginx/conf.d
      - ./docker/nginx/confs:/etc/nginx/confs
      - ./docker/nginx/certs:/etc/nginx/certs
    ports:
      - 80:80
      - 443:443
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - unsocial
  ############
  # Mastodon
  ############
  nginx-mastodon:
    image: nginx:1-alpine
    volumes:
      - ./docker/nginx/mastodon:/etc/nginx/conf.d
      - ./docker/nginx/confs:/etc/nginx/confs
      - ./docker/nginx/certs:/etc/nginx/certs
    ports:
      - 80:80
      - 443:443
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      default:
        aliases:
          - unsocial.localhost
    depends_on:
      mastodon-streaming:
        condition: service_healthy
      mastodon-sidekiq:
        condition: service_healthy
    profiles:
      - mastodon
  mastodon:
    image: tootsuite/mastodon:v4.2.7
    env_file: ./docker/mastodon/.env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rake db:migrate && bundle exec rails s -p 3000"
    healthcheck:
      # prettier-ignore
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:3000/health || exit 1"]
      interval: 2s
      timeout: 2s
      retries: 30
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./docker/mkcert:/mkcert
      - ./docker/mastodon/public/system:/mastodon/public/system
    profiles:
      - all
      - mastodon
  mastodon-streaming:
    image: tootsuite/mastodon:v4.2.7
    env_file: ./docker/mastodon/.env.production
    command: node ./streaming
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    depends_on:
      mastodon:
        condition: service_healthy
    profiles:
      - all
      - mastodon
  mastodon-sidekiq:
    image: tootsuite/mastodon:v4.2.7
    env_file: ./docker/mastodon/.env.production
    command: bundle exec sidekiq
    depends_on:
      mastodon:
        condition: service_healthy
    volumes:
      - ./docker/mkcert:/mkcert
      - ./docker/mastodon/public/system:/mastodon/public/system
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[s]idekiq\ 6' || false"]
    profiles:
      - all
      - mastodon
  ############
  # Misskey
  ############
  nginx-misskey:
    image: nginx:1-alpine
    volumes:
      - ./docker/nginx/misskey:/etc/nginx/conf.d
      - ./docker/nginx/confs:/etc/nginx/confs
      - ./docker/nginx/certs:/etc/nginx/certs
    ports:
      - 80:80
      - 443:443
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      default:
        aliases:
          - unsocial.localhost
    depends_on:
      misskey:
        condition: service_healthy
    profiles:
      - misskey
  misskey:
    image: misskey/misskey:2024.2.0
    volumes:
      - ./docker/misskey/files:/misskey/files
      - ./docker/misskey/.config:/misskey/.config:ro
      - ./docker/mkcert:/mkcert
    environment:
      - NODE_ENV=development
      - NODE_EXTRA_CA_CERTS=/mkcert/rootCA.pem
    healthcheck:
      test: ["CMD-SHELL", "node -e 'fetch(`http://localhost:3000`)'"]
      interval: 2s
      timeout: 2s
      retries: 30
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    profiles:
      - all
      - misskey
  ############
  # Others
  ############
  db:
    image: postgres:16-alpine
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./docker/db:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD", "test", "-e", "/var/lib/postgresql/data/db_initialized"]
      interval: 2s
      timeout: 2s
      retries: 10
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
  minio:
    image: minio/minio:RELEASE.2023-11-20T22-40-07Z
    command: server /data --console-address :9090
    ports:
      - 9000:9000
      - 9090:9090
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=password
  minio-createbucket:
    image: minio/mc:RELEASE.2023-11-20T16-30-59Z
    depends_on:
      - minio
    entrypoint: |
      sh -c "
        mc alias set myminio http://minio:9000 minio password;
        mc mb myminio/unsocial;
        mc anonymous set download myminio/unsocial;
      "
  mail:
    image: mailhog/mailhog:v1.0.1
    ports:
      - 8025:8025
